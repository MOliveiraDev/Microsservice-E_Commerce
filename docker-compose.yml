version: '3.8'

services:
  postgres:
    image: bitnami/postgresql:latest
    container_name: postgres
    environment:
      POSTGRESQL_USERNAME: admin
      POSTGRESQL_PASSWORD: admin123
      POSTGRESQL_DATABASE: ecommerce
      POSTGRESQL_INITDB_ARGS: '--encoding=UTF-8 --locale=en_US.UTF-8'
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/bitnami/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d ecommerce"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-net

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_HEAP_SIZE: 512M
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecommerce-net

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecommerce-net

  auth-service:
    build:
      context: ./authentication
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ecommerce
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      JWT_SECRET: your-strong-secret-key-here
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecommerce-net

  product-service:
    build:
      context: ./product
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ecommerce
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
    depends_on:
      - postgres
      - kafka
    networks:
      - ecommerce-net

  order-service:
    build:
      context: ./order
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ecommerce
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
    depends_on:
      - postgres
      - kafka
    networks:
      - ecommerce-net

  notification-service:
    build:
      context: ./notification
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-net

  gateway-service:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      auth-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - ecommerce-net

volumes:
  postgres_data:
    driver: local

networks:
  ecommerce-net:
    driver: bridge